# Generated by Django 5.2.5 on 2025-09-18 13:17

import django.db.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('dcim', '0210_macaddress_ordering'),
        ('extras', '0129_fix_script_paths'),
        ('tenancy', '0020_remove_contactgroupmembership'),
    ]

    operations = [
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=50)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='NOK', max_length=3)),
                ('external_id', models.CharField(blank=True, max_length=255, null=True)),
                ('total_licenses', models.PositiveIntegerField(default=1)),
                ('consumed_licenses', models.PositiveIntegerField(default=0)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('billing_cycle', models.CharField(default='monthly', max_length=20)),
                ('auto_renew', models.BooleanField(default=False)),
                ('total_instances', models.PositiveIntegerField(default=0)),
                ('comments', models.TextField(blank=True)),
                ('assignment_type', models.ForeignKey(limit_choices_to={'model__in': ['contact', 'device', 'virtualmachine', 'tenant', 'service']}, on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='licenses', to='tenancy.tenant')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='licenses', to='dcim.manufacturer')),
            ],
            bases=(models.Model,)
        ),
        migrations.CreateModel(
            name='CostAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('allocation_type', models.CharField(max_length=20)),
                ('allocation_target', models.CharField(max_length=100)),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('effective_from', models.DateField()),
                ('effective_to', models.DateField(blank=True, null=True)),
                ('allocation_rules', models.JSONField(blank=True, default=dict)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cost_allocations', to='netbox_licenses.license')),
            ],
            options={
                'ordering': ['-effective_from'],
            },
            bases=(models.Model,)
        ),
        migrations.CreateModel(
            name='LicenseAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('alert_type', models.CharField(max_length=30)),
                ('severity', models.CharField(max_length=10)),
                ('status', models.CharField(default='active', max_length=15)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('triggered_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('alert_data', models.JSONField(blank=True, default=dict)),
                ('notifications_sent', models.PositiveIntegerField(default=0)),
                ('last_notification', models.DateTimeField(blank=True, null=True)),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='netbox_licenses.license')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ['-triggered_at'],
            },
            bases=(models.Model,)
        ),
        migrations.CreateModel(
            name='LicenseAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('metric_type', models.CharField(max_length=20)),
                ('metric_value', models.DecimalField(decimal_places=2, max_digits=12)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='netbox_licenses.license')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LicenseInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('assigned_object_id', models.PositiveIntegerField()),
                ('price_override', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('currency_override', models.CharField(blank=True, max_length=3, null=True)),
                ('nok_price_override', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('auto_renew', models.BooleanField(blank=True, default=None, null=True)),
                ('comments', models.TextField(blank=True)),
                ('assigned_object_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='netbox_licenses.license')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,)
        ),
        migrations.CreateModel(
            name='LicenseRenewal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('renewal_date', models.DateField()),
                ('new_end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('requested_by', models.CharField(blank=True, max_length=100)),
                ('approved_by', models.CharField(blank=True, max_length=100)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('renewal_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('currency', models.CharField(default='NOK', max_length=3)),
                ('budget_approved', models.BooleanField(default=False)),
                ('budget_code', models.CharField(blank=True, max_length=50)),
                ('workflow_data', models.JSONField(blank=True, default=dict)),
                ('notes', models.TextField(blank=True)),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renewals', to='netbox_licenses.license')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ['-renewal_date'],
            },
            bases=(models.Model,)
        ),
        migrations.CreateModel(
            name='VendorIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('integration_type', models.CharField(max_length=50)),
                ('api_endpoint', models.URLField(blank=True)),
                ('api_credentials', models.JSONField(blank=True, default=dict)),
                ('sync_schedule', models.CharField(default='daily', max_length=20)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('next_sync', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sync_errors', models.PositiveIntegerField(default=0)),
                ('last_error', models.TextField(blank=True)),
                ('field_mappings', models.JSONField(blank=True, default=dict)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='integrations', to='dcim.manufacturer')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,)
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['external_id'], name='netbox_lice_externa_be7bee_idx'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['vendor', 'external_id'], name='netbox_lice_vendor__30e5e7_idx'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['consumed_licenses', 'total_licenses'], name='netbox_lice_consume_ddbdd5_idx'),
        ),
        migrations.AddConstraint(
            model_name='license',
            constraint=models.UniqueConstraint(fields=('name', 'vendor', 'tenant'), name='unique_license_key'),
        ),
        migrations.AlterUniqueTogether(
            name='costallocation',
            unique_together={('license', 'allocation_target', 'effective_from')},
        ),
        migrations.AddIndex(
            model_name='licensealert',
            index=models.Index(fields=['status', '-triggered_at'], name='netbox_lice_status_59b31e_idx'),
        ),
        migrations.AddIndex(
            model_name='licensealert',
            index=models.Index(fields=['alert_type', 'severity'], name='netbox_lice_alert_t_1057d8_idx'),
        ),
        migrations.AddIndex(
            model_name='licenseanalytics',
            index=models.Index(fields=['license', 'metric_type', '-timestamp'], name='netbox_lice_license_e7401a_idx'),
        ),
        migrations.AddIndex(
            model_name='licenseanalytics',
            index=models.Index(fields=['timestamp'], name='netbox_lice_timesta_da56cd_idx'),
        ),
    ]
